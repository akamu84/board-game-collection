{"version":3,"sources":["components/presentation/AddOwnerForm.tsx","components/presentation/FilterPanel.tsx","components/presentation/GameImage.tsx","components/presentation/GameInfo.tsx","components/presentation/GameRating.tsx","components/presentation/OwnerList.tsx","components/presentation/GameDetail.tsx","components/presentation/GameList.tsx","services/BoardGameGeekApi.ts","Helpers.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","form","marginTop","button","AddOwnerForm","addOwner","classes","useState","userName","setUserName","className","onSubmit","e","preventDefault","FormControl","variant","fullWidth","InputLabel","htmlFor","FilledInput","id","type","onChange","target","value","toLowerCase","trim","endAdornment","InputAdornment","position","Button","color","root","bottom","list","width","listItem","FilterPanel","masterCollection","setMasterCollection","React","players","setPlayers","rating","setRating","playTime","setPlayTime","valuetext","handleCommitted","collection","map","game","maxPlayTime","maxPlayers","playerFilter","stats","minPlayers","timeFilter","playingTime","ratingFilter","filtered","ExpansionPanel","ExpansionPanelSummary","expandIcon","aria-controls","Typography","ExpansionPanelDetails","List","ListItem","ListItemIcon","Slider","event","newValue","onChangeCommitted","valueLabelDisplay","aria-labelledby","getAriaValueText","max","onClick","image","height","img","margin","display","maxWidth","maxHeight","GameImage","Grid","item","alt","src","text","alignItems","icon","marginLeft","GameInfo","xs","container","direction","spacing","gutterBottom","name","Divider","fontSize","GameRating","toString","length","style","ownerInfo","OwnerList","owners","removeOwner","owner","key","Chip","size","label","onDelete","flexGrow","paper","padding","marginBottom","GameDetail","Paper","square","GameList","filter","getCollectionAsync","a","async","callBatchedEndpointAsync","response","data","convertToJson","url","Response","fetch","status","sleep","source","JSON","parse","xmljs","xml2json","compact","spaces","ignoreDeclaration","converted","items","errors","hasError","error","message","_text","totalItems","_attributes","totalitems","element","convertedItem","objectid","subtype","published","parseFloat","yearpublished","thumbnail","minplayers","maxplayers","playingtime","average","games","ms","Promise","resolve","setTimeout","mergeCollections","collections","forEach","index","findIndex","existingGame","push","sort","mergedGame","Math","round","roundRating","convertGameToMergedGame","b","gameList","App","setCollections","setOwners","useEffect","existingOwners","localStorage","getItem","existingOwner","setItem","stringify","collectionExists","showError","ownerExists","some","alert","Fragment","filteredOwners","Boolean","window","location","hostname","match","darkTheme","createMuiTheme","palette","primary","blue","secondary","main","ReactDOM","render","ThemeProvider","CssBaseline","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4d85d1db.chunk.js","sourcesContent":["import React, { FormEvent, useState } from 'react';\r\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles';\r\n\r\nimport AccountCircle from '@material-ui/icons/AccountCircle';\r\nimport Button from '@material-ui/core/Button';\r\nimport FilledInput from '@material-ui/core/FilledInput';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    form: {\r\n      marginTop: '.5rem',\r\n    },\r\n    button: {\r\n      marginTop: '.5rem',\r\n    },\r\n  }),\r\n);\r\n\r\ninterface AddOwnerFormProps {\r\n  addOwner: (owner: string) => Promise<void>;\r\n}\r\n\r\nconst AddOwnerForm: React.FC<AddOwnerFormProps> = ({ addOwner }) => {\r\n  const classes = useStyles();\r\n\r\n  const [userName, setUserName] = useState<string>('');\r\n\r\n  const handleSubmit = (e: FormEvent) => {\r\n    e.preventDefault();\r\n    addOwner(userName);\r\n    setUserName('');\r\n  };\r\n\r\n  return (\r\n    <form className={classes.form} onSubmit={handleSubmit}>\r\n      <FormControl variant=\"filled\" fullWidth>\r\n        <InputLabel htmlFor=\"user-input\">Board Game Geek User</InputLabel>\r\n        <FilledInput\r\n          id=\"user-input\"\r\n          type=\"text\"\r\n          onChange={(e) => setUserName(e.target.value.toLowerCase().trim())}\r\n          endAdornment={\r\n            <InputAdornment position=\"end\">\r\n              <AccountCircle />\r\n            </InputAdornment>\r\n          }\r\n        />\r\n      </FormControl>\r\n      <Button\r\n        className={classes.button}\r\n        type=\"submit\"\r\n        color=\"primary\"\r\n        variant=\"contained\"\r\n        fullWidth\r\n      >\r\n        Add\r\n      </Button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default AddOwnerForm;\r\n","import { Button, Slider } from '@material-ui/core';\r\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles';\r\n\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\r\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\r\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\r\nimport { IMergedGame } from '../../models/index';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport React from 'react';\r\nimport StarsIcon from '@material-ui/icons/Stars';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport WatchLaterIcon from '@material-ui/icons/WatchLater';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      position: 'fixed',\r\n      bottom: 0,\r\n    },\r\n    list: {\r\n      width: '500px',\r\n    },\r\n    listItem: {\r\n      marginTop: '1.5rem',\r\n    },\r\n  }),\r\n);\r\n\r\ninterface FilterPanelProps {\r\n  masterCollection: IMergedGame[];\r\n  setMasterCollection: (masterCollection: IMergedGame[]) => void;\r\n}\r\n\r\nconst FilterPanel: React.FC<FilterPanelProps> = ({\r\n  masterCollection,\r\n  setMasterCollection,\r\n}) => {\r\n  const classes = useStyles();\r\n\r\n  const [players, setPlayers] = React.useState<number[]>([0, 100]);\r\n  const [rating, setRating] = React.useState<number[]>([0, 10]);\r\n  const [playTime, setPlayTime] = React.useState<number[]>([0, 240]);\r\n\r\n  const valuetext = (value: number) => {\r\n    return `${value}`;\r\n  };\r\n\r\n  const clearFilters = () => {\r\n    setPlayers([0, 20]);\r\n    setRating([0, 10]);\r\n    setPlayTime([0, 240]);\r\n    const collection = masterCollection.map((game) => ({\r\n      ...game,\r\n      filtered: false,\r\n    }));\r\n    setMasterCollection(collection);\r\n  };\r\n\r\n  const handlePlayerChange = (event: any, newValue: number | number[]) => {\r\n    setPlayers(newValue as number[]);\r\n  };\r\n\r\n  const handlePlayTimeChange = (event: any, newValue: number | number[]) => {\r\n    setPlayTime(newValue as number[]);\r\n  };\r\n\r\n  const handleRatingChange = (event: any, newValue: number | number[]) => {\r\n    setRating(newValue as number[]);\r\n  };\r\n\r\n  const handleCommitted = () => {\r\n    const collection = masterCollection.map((game) => {\r\n      const maxPlayTime = playTime[1] === 240 ? 999 : playTime[1];\r\n\r\n      const maxPlayers = players[1] === 20 ? 999 : players[1];\r\n\r\n      const playerFilter =\r\n        game.stats.minPlayers >= players[0] &&\r\n        game.stats.maxPlayers <= maxPlayers;\r\n\r\n      const timeFilter =\r\n        game.stats.playingTime >= playTime[0] &&\r\n        game.stats.playingTime <= maxPlayTime;\r\n\r\n      const ratingFilter = game.rating >= rating[0] && game.rating <= rating[1];\r\n\r\n      game.filtered = !playerFilter || !timeFilter || !ratingFilter;\r\n      return game;\r\n    });\r\n    setMasterCollection(collection);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <ExpansionPanel>\r\n        <ExpansionPanelSummary\r\n          expandIcon={<ExpandMoreIcon />}\r\n          aria-controls=\"filter-panel-content\"\r\n          id=\"filter-panel-header\"\r\n        >\r\n          <Typography>Filter</Typography>\r\n        </ExpansionPanelSummary>\r\n        <ExpansionPanelDetails>\r\n          <List className={classes.list}>\r\n            <ListItem className={classes.listItem}>\r\n              <ListItemIcon>\r\n                <PeopleIcon />\r\n              </ListItemIcon>\r\n              <Slider\r\n                value={players}\r\n                onChange={handlePlayerChange}\r\n                onChangeCommitted={handleCommitted}\r\n                valueLabelDisplay=\"on\"\r\n                aria-labelledby=\"range-slider\"\r\n                getAriaValueText={valuetext}\r\n                max={20}\r\n              />\r\n            </ListItem>\r\n            <ListItem className={classes.listItem}>\r\n              <ListItemIcon>\r\n                <WatchLaterIcon />\r\n              </ListItemIcon>\r\n              <Slider\r\n                value={playTime}\r\n                onChange={handlePlayTimeChange}\r\n                onChangeCommitted={handleCommitted}\r\n                valueLabelDisplay=\"on\"\r\n                aria-labelledby=\"range-slider\"\r\n                getAriaValueText={valuetext}\r\n                max={240}\r\n              />\r\n            </ListItem>\r\n            <ListItem className={classes.listItem}>\r\n              <ListItemIcon>\r\n                <StarsIcon />\r\n              </ListItemIcon>\r\n              <Slider\r\n                value={rating}\r\n                onChange={handleRatingChange}\r\n                onChangeCommitted={handleCommitted}\r\n                valueLabelDisplay=\"on\"\r\n                aria-labelledby=\"range-slider\"\r\n                getAriaValueText={valuetext}\r\n                max={10}\r\n              />\r\n            </ListItem>\r\n            <ListItem className={classes.listItem}>\r\n              <Button onClick={clearFilters}>Clear</Button>\r\n            </ListItem>\r\n          </List>\r\n        </ExpansionPanelDetails>\r\n      </ExpansionPanel>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FilterPanel;\r\n","import { Theme, createStyles, makeStyles } from '@material-ui/core/styles';\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport React from 'react';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    image: {\r\n      width: 128,\r\n      height: 128,\r\n    },\r\n    img: {\r\n      margin: 'auto',\r\n      display: 'block',\r\n      maxWidth: '100%',\r\n      maxHeight: '100%',\r\n    },\r\n  }),\r\n);\r\n\r\ninterface GameImageProps {\r\n  image: string;\r\n}\r\n\r\nconst GameImage: React.FC<GameImageProps> = ({ image }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Grid item>\r\n      <div className={classes.image}>\r\n        <img className={classes.img} alt=\"box art\" src={image} />\r\n      </div>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default GameImage;\r\n","import { Theme, createStyles, makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { Divider } from '@material-ui/core';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { IMergedGame } from '../../models';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport WatchLaterIcon from '@material-ui/icons/WatchLater';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    text: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      marginTop: '1rem',\r\n    },\r\n    icon: {\r\n      marginLeft: '.5rem',\r\n    },\r\n  }),\r\n);\r\n\r\ninterface GameInfoProps {\r\n  game: IMergedGame;\r\n}\r\n\r\nconst GameInfo: React.FC<GameInfoProps> = ({ game }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Grid item xs container direction=\"column\" spacing={1}>\r\n      <Grid item xs>\r\n        <Typography gutterBottom variant=\"h6\">\r\n          {game.name}\r\n        </Typography>\r\n        <Divider />\r\n        <Typography variant=\"body2\" gutterBottom className={classes.text}>\r\n          {game.stats.playingTime}\r\n          {'m'}\r\n          <WatchLaterIcon fontSize=\"small\" className={classes.icon} />\r\n        </Typography>\r\n        <Typography variant=\"body2\" gutterBottom className={classes.text}>\r\n          {game.stats.minPlayers === game.stats.maxPlayers\r\n            ? game.stats.minPlayers\r\n            : `${game.stats.minPlayers}-${game.stats.maxPlayers}`}\r\n          <PeopleIcon fontSize=\"small\" className={classes.icon} />\r\n        </Typography>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default GameInfo;\r\n","import { Theme, createStyles, makeStyles } from '@material-ui/core/styles';\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport React from 'react';\r\nimport StarsIcon from '@material-ui/icons/Stars';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    text: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n    },\r\n    icon: {\r\n      marginLeft: '.5rem',\r\n    },\r\n  }),\r\n);\r\n\r\ninterface GameRatingProps {\r\n  rating: number;\r\n}\r\n\r\nconst GameRating: React.FC<GameRatingProps> = ({ rating }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Grid item>\r\n      <Typography variant=\"subtitle1\" className={classes.text}>\r\n        {rating.toString().length === 1 ? `${rating}.0` : rating}\r\n        <StarsIcon\r\n          fontSize=\"small\"\r\n          style={{ color: 'gold' }}\r\n          className={classes.icon}\r\n        />\r\n      </Typography>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default GameRating;\r\n","import { Theme, createStyles, makeStyles } from '@material-ui/core/styles';\r\n\r\nimport AccountCircle from '@material-ui/icons/AccountCircle';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport React from 'react';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    ownerInfo: {\r\n      marginTop: '.5rem',\r\n    },\r\n  }),\r\n);\r\n\r\ninterface OwnerListProps {\r\n  owners: string[];\r\n  removeOwner?: (owner: string) => void;\r\n}\r\n\r\nconst OwnerList: React.FC<OwnerListProps> = ({ owners, removeOwner }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Grid\r\n      item\r\n      container\r\n      direction=\"row\"\r\n      spacing={1}\r\n      className={classes.ownerInfo}\r\n    >\r\n      {owners.map((owner) => (\r\n        <Grid item key={owner}>\r\n          {removeOwner ? (\r\n            <Chip\r\n              size=\"small\"\r\n              color=\"primary\"\r\n              icon={<AccountCircle />}\r\n              label={owner}\r\n              onDelete={(e) => removeOwner(owner)}\r\n            />\r\n          ) : (\r\n            <Chip\r\n              size=\"small\"\r\n              color=\"primary\"\r\n              icon={<AccountCircle />}\r\n              label={owner}\r\n            />\r\n          )}\r\n        </Grid>\r\n      ))}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default OwnerList;\r\n","import { Theme, createStyles, makeStyles } from '@material-ui/core/styles';\r\n\r\nimport GameImage from './GameImage';\r\nimport GameInfo from './GameInfo';\r\nimport GameRating from './GameRating';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { IMergedGame } from '../../models/index';\r\nimport OwnerList from './OwnerList';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport React from 'react';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    paper: {\r\n      padding: theme.spacing(2),\r\n      margin: 'auto',\r\n      marginBottom: '.5rem',\r\n      maxWidth: 500,\r\n    },\r\n  }),\r\n);\r\n\r\ninterface GameDetailProps {\r\n  game: IMergedGame;\r\n}\r\n\r\nconst GameDetail: React.FC<GameDetailProps> = ({ game }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Paper className={classes.paper} square>\r\n        <Grid container spacing={2}>\r\n          <GameImage image={game.image} />\r\n          <Grid item xs container>\r\n            <GameInfo game={game} />\r\n            <GameRating rating={game.rating} />\r\n          </Grid>\r\n        </Grid>\r\n        <OwnerList owners={game.owners} />\r\n      </Paper>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameDetail;\r\n","import GameDetail from './GameDetail';\r\nimport { IMergedGame } from '../../models/index';\r\nimport React from 'react';\r\n\r\ninterface GameListProps {\r\n  collection: IMergedGame[];\r\n}\r\n\r\nconst GameList: React.FC<GameListProps> = ({ collection }) => (\r\n  <div>\r\n    {collection\r\n      .filter((game) => !game.filtered)\r\n      .map((game) => (\r\n        <GameDetail key={game.id} game={game} />\r\n      ))}\r\n  </div>\r\n);\r\n\r\nexport default GameList;\r\n","import xmljs from \"xml-js\";\r\nimport { ICollection, IGame } from \"../models/index\";\r\n\r\nexport async function getCollectionAsync(\r\n  userName: string\r\n): Promise<ICollection> {\r\n  let response = await callBatchedEndpointAsync(\r\n    `https://boardgamegeek.com/xmlapi/collection/${userName}?own=1`\r\n  );\r\n  let data = await response.text();\r\n  return convertToJson(data, userName);\r\n}\r\n\r\n// Call fetch with retry\r\nasync function callBatchedEndpointAsync(url: string): Promise<any> {\r\n  let response = new Response();\r\n  try {\r\n    response = await fetch(url);\r\n    // If response code was 202 then the request was queued and needs to be called again\r\n    if (response.status === 202) {\r\n      await sleep(500);\r\n      response = await callBatchedEndpointAsync(url);\r\n    }\r\n  } catch (err) {\r\n    response = new Response(`\r\n      <?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\" ?>\r\n      <errors>\r\n        <error>\r\n          <message>${err}</message>\r\n        </error>\r\n      </errors>\r\n    `);\r\n  } finally {\r\n    return response;\r\n  }\r\n}\r\n\r\n// Convert XML response to typed object\r\nfunction convertToJson(data: any, userName: string): ICollection {\r\n  // Convert XML to JSON\r\n  let source: any = JSON.parse(\r\n    xmljs.xml2json(data, { compact: true, spaces: 4, ignoreDeclaration: true })\r\n  );\r\n\r\n  let converted: ICollection = {} as ICollection;\r\n  let items = [];\r\n\r\n  if (source.errors) {\r\n    converted.hasError = true;\r\n    converted.error = source.errors.error.message._text;\r\n  }\r\n\r\n  if (source.items) {\r\n    converted.hasError = false;\r\n    converted.totalItems = source.items._attributes.totalitems;\r\n    converted.owner = userName;\r\n\r\n    // Convert default JSON to typed object\r\n    items = source.items.item.map(function(element: any) {\r\n      let convertedItem: IGame = {} as IGame;\r\n      convertedItem.id = element._attributes.objectid;\r\n      convertedItem.type = element._attributes.subtype;\r\n      convertedItem.name = element.name._text;\r\n      convertedItem.published = parseFloat(element.yearpublished._text);\r\n      convertedItem.image = element.image._text;\r\n      convertedItem.thumbnail = element.thumbnail._text;\r\n      convertedItem.stats = {\r\n        minPlayers: parseFloat(element.stats._attributes.minplayers) || 0,\r\n        maxPlayers: parseFloat(element.stats._attributes.maxplayers) || 99,\r\n        playingTime: parseFloat(element.stats._attributes.playingtime) || 0\r\n      };\r\n      convertedItem.rating =\r\n        parseFloat(element.stats.rating.average._attributes.value) || 0;\r\n\r\n      return convertedItem;\r\n    });\r\n\r\n    converted.games = items;\r\n  }\r\n\r\n  return converted;\r\n}\r\n\r\n// Sleep for x milleseconds\r\nfunction sleep(ms: number) {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n","import { ICollection, IGame, IMergedGame } from \"./models/index\";\r\n\r\nexport function mergeCollections(collections: ICollection[]): IMergedGame[] {\r\n  let games = [] as IMergedGame[];\r\n\r\n  collections.forEach(collection => {\r\n    collection.games.forEach(game => {\r\n      // Check if the game is already in the array\r\n      let index = games.findIndex(existingGame => existingGame.id === game.id);\r\n      if (index >= 0) {\r\n        // Add the collection owner as an owner to the existing game\r\n        games[index].owners.push(collection.owner);\r\n        games[index].owners.sort();\r\n      } else {\r\n        // Add the game to the array\r\n        games.push(convertGameToMergedGame(collection.owner, game));\r\n      }\r\n    });\r\n  });\r\n\r\n  return games.sort((a, b) => (a.name > b.name ? 1 : -1));\r\n}\r\n\r\n// Convert the incoming game object to the merged game object\r\nfunction convertGameToMergedGame(owner: string, game: IGame): IMergedGame {\r\n  let mergedGame = {} as IMergedGame;\r\n  mergedGame.id = game.id;\r\n  mergedGame.type = game.type;\r\n  mergedGame.name = game.name;\r\n  mergedGame.published = game.published;\r\n  mergedGame.image = game.image;\r\n  mergedGame.thumbnail = game.thumbnail;\r\n  mergedGame.stats = game.stats;\r\n  mergedGame.rating = roundRating(game.rating);\r\n  mergedGame.owners = [];\r\n  mergedGame.owners.push(owner);\r\n\r\n  return mergedGame;\r\n}\r\n\r\n// Round to one decimal\r\nfunction roundRating(rating: number): number {\r\n  return Math.round(rating * 10) / 10;\r\n}\r\n","import { ICollection, IMergedGame } from './models/index';\nimport React, { useEffect, useState } from 'react';\n\nimport AddOwnerForm from './components/presentation/AddOwnerForm';\nimport FilterPanel from './components/presentation/FilterPanel';\nimport GameList from './components/presentation/GameList';\nimport { Grid } from '@material-ui/core';\nimport OwnerList from './components/presentation/OwnerList';\nimport { getCollectionAsync } from './services/BoardGameGeekApi';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { mergeCollections } from './Helpers';\n\nconst useStyles = makeStyles({\n  gameList: {\n    marginBottom: '3rem',\n  },\n});\n\nconst App: React.FC = () => {\n  const classes = useStyles();\n\n  const [collections, setCollections] = useState<ICollection[]>([]);\n  const [masterCollection, setMasterCollection] = useState<IMergedGame[]>([]);\n  const [owners, setOwners] = useState<string[]>([]);\n\n  useEffect(() => {\n    let existingOwners = JSON.parse(localStorage.getItem('owners') as string);\n    if (existingOwners) {\n      existingOwners.forEach((existingOwner: string) => {\n        addOwner(existingOwner);\n      });\n    }\n  });\n\n  useEffect(() => {\n    setMasterCollection(mergeCollections(collections));\n  }, [collections]);\n\n  useEffect(() => {\n    localStorage.setItem('owners', JSON.stringify(owners));\n  }, [owners]);\n\n  const addOwner = async (owner: string) => {\n    if (!collectionExists(owner)) {\n      const collection = await getCollectionAsync(owner);\n\n      if (collection.hasError) {\n        showError(collection.error);\n      } else {\n        setCollections((collections) => [...collections, collection]);\n\n        if (!ownerExists(owner)) {\n          setOwners((owners) => [...owners, owner]);\n        }\n      }\n    }\n  };\n\n  const removeOwner = (owner: string) => {\n    let filteredOwners = owners.filter(\n      (existingOwner) => existingOwner !== owner,\n    );\n    localStorage.setItem('owners', JSON.stringify(filteredOwners));\n    setOwners(filteredOwners);\n    setCollections(\n      collections.filter((collection) => collection.owner !== owner),\n    );\n  };\n\n  const collectionExists = (owner: string): boolean =>\n    collections.some((collection) => collection.owner === owner);\n\n  const ownerExists = (owner: string): boolean =>\n    owners.some((existingOwner) => existingOwner === owner);\n\n  const showError = (error: string) => alert(error);\n\n  return (\n    <React.Fragment>\n      <Grid container direction=\"column\" alignItems=\"center\" spacing={1}>\n        <Grid item xs={12}>\n          <AddOwnerForm addOwner={addOwner} />\n        </Grid>\n        <Grid item xs={12}>\n          <OwnerList owners={owners} removeOwner={removeOwner} />\n        </Grid>\n        <Grid item xs={12} className={classes.gameList}>\n          <GameList collection={masterCollection} />\n        </Grid>\n        <FilterPanel\n          masterCollection={masterCollection}\n          setMasterCollection={setMasterCollection}\n        />\n      </Grid>\n    </React.Fragment>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport { ThemeProvider } from \"@material-ui/core/styles\";\nimport { createMuiTheme } from \"@material-ui/core/styles\";\nimport blue from \"@material-ui/core/colors/blue\";\n\nconst darkTheme = createMuiTheme({\n  palette: {\n    primary: blue,\n    secondary: {\n      main: \"#b71c1c\"\n    },\n    type: \"dark\"\n  }\n});\n\nReactDOM.render(\n  <ThemeProvider theme={darkTheme}>\n    <CssBaseline>\n      <App />\n    </CssBaseline>\n  </ThemeProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}